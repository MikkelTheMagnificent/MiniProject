<!-- 
    Notice how this route has a route parameter 'id'. This is how we can pass data to the route.
    See how the links are made in 'PostList.razor'.
-->
@page "/api/posts/{id}"

@using Blazor.Data;
@using shared.Model;
@inject ApiService postService



@if (Post == null)
{
    <p><em>Loading...</em></p>
}
else
{
        <div class="card w-200">
            <div class="card-body">
                <h5 class="card-title"><b>@Post.Title</b></h5>
                <p class="card-text"><b>Author: </b>@Post.Author</p>
                <p><b>Posted on: </b> @Post.Date</p>
                <p class="card-text"><b>Content: </b>@Post.Content</p>
                <p class="card-text"><b>Upvotes: </b> @Post.Upvotes   Downvotes: @Post.Downvotes</p> 
               
            </div>
        </div>

        <div class="card w-200">
            <div class="card-body">
                <h5 class="card-title">Comments</h5>
                @foreach (var comment in comments)
                {
                    <div class="card-body">
                        <p class="card-text"><b>Author:</b> @comment.Author</p>
                        <p class="card-text"><b>Comment:</b> @comment.Content</p>
                        <p class="card-text"><b>Posted on:</b> @comment.Date</p>
                        <p class="card-text"><b>Upvotes:</b> @comment.Upvotes</p>
                        <p class="card-text"><b>Downvotes: </b> @comment.Downvotes</p>
                        <button class="btn btn-primary" @onclick="() =>Upvote(comment.CommentId)">Upvote</button>
                        <button class="btn btn-primary" @onclick="() =>Downvote(comment.CommentId)">Downvote</button>
                        
                        
                    </div>

                }

            </div>
        </div>

        <h2>Create a comment</h2>

         <CreateComment PostId=@PostId></CreateComment>

    }

    @code {

        private Comment[] comments;
        private InputComment inputComment  = new InputComment ();
        [Parameter]
        public string Id { get; set; }
        public int PostId { get { return int.Parse(Id); } }

        private Post Post { get; set; }

    protected override async Task OnInitializedAsync()
    {
        Post = await postService.GetPostById(PostId);
        comments = await postService.GetCommentById(PostId);
    }

    private async Task CreateNewComment(InputComment comment){
        postService.CreateComment(comment);
    }
     public void Upvote(int id)
    {
        postService.UpvoteComment(id);
    }

    public void Downvote(int id)
    {
        postService.DownvoteComment(id);
    }
}

  

 