<!-- 
    Notice how this route has a route parameter 'id'. This is how we can pass data to the route.
    See how the links are made in 'PostList.razor'.
-->
@page "/api/posts/{id}"

@using Blazor.Data;
@using shared.Model;
@inject ApiService postService


<PageTitle>Post</PageTitle>

@if (Post == null)
{
    <p><em>Loading...</em></p>
}
else
{
        <div class="card w-75">
            <div class="card-body">
                <h5 class="card-title">@Post.Title</h5>
                <p>Posted on: @Post.Date</p>
                <p class="card-text">Content: @Post.Content</p>
                <p class="card-text">Upvotes: @Post.Upvotes   Downvotes: @Post.Downvotes</p> 
               
            </div>
        </div>

        <div class="card w-75">
            <div class="card-body">
                <h5 class="card-title">Comments</h5>
                @foreach (var comment in comments)
                {
                    <div class="card-body">
                        <p class="card-text">Author: @comment.Author</p>
                        <p class="card-text">Comment: @comment.Content</p>
                        <p class="card-text">Posted on: @comment.Date</p>
                        <p class="card-text">Upvotes: @comment.Upvotes</p>
                        <p class="card-text">Downvotes: @comment.Downvotes</p>
                        <button class="btn btn-primary" @onclick="() =>Upvote(comment.CommentId)">Upvote</button>
                        <button class="btn btn-primary" @onclick="() =>Downvote(comment.CommentId)">Downvote</button>
                        
                        
                    </div>

                }

            </div>
        </div>

        

    }

    @code {

        private Comment[] comments;
        
        [Parameter]
        public string Id { get; set; }
        public int PostId { get { return int.Parse(Id); } }

        private Post Post { get; set; }

    protected override async Task OnInitializedAsync()
    {
        Post = await postService.GetPostById(PostId);
        comments = await postService.GetCommentById(PostId);
    }
     public void Upvote(int id)
    {
        postService.UpvoteComment(id);
    }

    public void Downvote(int id)
    {
        postService.DownvoteComment(id);
    }
}

  

 